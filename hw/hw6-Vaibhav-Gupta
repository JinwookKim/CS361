Lecture 28
1. What must be true for the receiver to interpret the answer to a “yes” or “no” question?
	They must both understand what the answer means ( 0 - No, 1 - Yes, for both)
2. Why would one want to quantify the information content of a message?
	Because it would the sender maximize the bandwidth
3. Why must the sender and receiver have some shared knowledge and an agreed encoding scheme?
	So there is no confusion as to what the data means
4. Why wouldn’t the sender want to transmit more data than the receiver needs to resolve uncertainty?
	It may lead to overflow of data which may confuse the receiver
5. If the receiver knows the answer to a question will be “yes,” how many bits of data quantify the information content? Explain.
	Then do we really need a communications? We may use it to verify the senders integrity and only use 1 bit

Lecture 29
1. How much information is contained in each of the ﬁrst three messages from slide 2?
	n bits
	4 bits
	7 bits
2. Why does the amound of information contained in “The attack is at dawn” depend on the receiver’s level of uncertainty?
	so if the reciever knows that the sender only sends attack times, we can only send dawn
3. How many bits of information must be transmitted for a sender to send one of exactly 16 messages? Why?
	4 bits because we can find a common shared encoding
4. How much information content is contained in a message from a space of 256 messages?
	265 bits worth
5. Explain why very few circumstances are ideal, in terms of sending information content.
	Balanced binary trees arent existant all the time

Lecture 30
1. Explain the difference between the two connotations of the term “bit.”
	binary digit vs quantity of information
2. Construct the naive encoding for 8 possible messages.
	000, 001, 010, 011, 100, 101, 110, 111
3. Explain why the encoding on slide 5 takes 995 + (5 * 5) bits.
	So if the first bit recieved is a 1, then we wait for more, otherwise we recognize that it works with a 0
4. How can knowing the prior probabilities of messages lead to a more efﬁcient encoding?
	similar to how question 3 shows we can send 1.02 bits / message rather than 4000, it can reduce it
5. Construct an encoding for 4 possible messages that is worse than the naive encoding.
	000100, 100000, 110000, 1111001
6. What are some implications if it is possible to ﬁnd an optimal encoding?
	Every problem can be minimized

Lecture 31
1. Name a string in the language consisting of positive, even numbers.
	20444224
2. Construct a non-preﬁx-free encoding for the possible rolls of a 6-sided die.
	1 - 0000
	2 - 0001
	3 - 00011
	4 - 000111
	5 - 0001111
	6 - 00011111
3. Why is it necessary for an encoding to be uniquely decodable?
	So you dont mix up simples (like the asnwer to 1 is abiguous as it could just be 1 long number)
4. Why is a lossless encoding scheme desirable?
	Same answers as 3
5. Why doesn’t Morse code satisfy our criteria for encodings?
	It is not lossless

Lecture 32
1. Calculate the entropy of an 8-sided, fair die (all outcomes are equally likely).
	h = - ( 8 * 1/8 * log (1/8)) = 0.903
2. If an unbalanced coin is 4 times more likely to yield a tail than a head, what is the entropy of the language?
	h = - ( 1/5 * log(1/5) + 4/5 * log(4/5) )
3. Why is knowing the entropy of a language important?
	It tells you the limit of what the system is

Lecture 33
1. Explain the reasoning behind the expectations presented in slide 3.
	as written you multiply probabilities to get the results
2. Explain why the total expected number of bits is 27 in the example presented in slide 4.
	count * len(code)
3. What is the naive encoding for the language in slide 5?
	1 - head, 0 - tails
4. What is the entropy of this language?
	h = -( 1 / 10 * log( 1 / 10 ) + 3 / 10 * log( 3 / 10) + 6 / 10 * log( 6 / 10) ) * 2 = 0.780
5. Find an encoding more efﬁcient than the naive encoding for this language.
	1 - 0
	2 - 10
	3 - 110
	4 - 1110
	5 - 11110
	6 - 11111
6. Why is your encoding more efﬁcient than the naive encoding?
	for 20 experiments
	1 | 6 | 1 | 6
	2 | 6 | 2 | 12
	3 | 3 | 3 | 9
	4 | 3 | 4 | 12
	5 | 1 | 5 | 5
	6 | 1 | 5 | 5
	Total     | 49
	for naive : 20 * 3 = 60